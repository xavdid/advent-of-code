#!/usr/bin/env python3

import argparse
import cProfile
import sys
from importlib import import_module
from pathlib import Path

from housekeeping.date_utils import current_puzzle_year, next_day


def main(day: str, year: str, slow: bool, debug: bool):
    try:
        # class needs to have this name
        if ARGS.day is None:
            year_dir = Path(f"solutions/{year}")
            day = next_day(year_dir)
        solver = import_module(f"solutions.{year}.day_{day}.solution").Solution
    except ModuleNotFoundError:
        print(
            f"solution not found for day {day} ({year}) (or there's an ImportError in your code)"
        )
        sys.exit(1)

    solver(run_slow=slow, debug=debug).print_solutions()


PARSER = argparse.ArgumentParser(
    description="Run a day of Advent of Code", prog="advent"
)

PARSER.add_argument(
    "day",
    nargs="?",
    help=(
        "Which puzzle day to run, between [1,25]."
        " Defaults to the latest day in the specified year (matching `day_N`)."
    ),
)
PARSER.add_argument("--year", default=current_puzzle_year())
PARSER.add_argument(
    "--slow",
    action="store_true",
    help="specify that long-running solutions (or those requiring manual input) should be run",
)
PARSER.add_argument(
    "--debug", action="store_true", help="prints normally-hidden debugging statements"
)
PARSER.add_argument(
    "--profile", action="store_true", help="run solution through a performance profiler"
)

ARGS = PARSER.parse_args()

if ARGS.profile:
    cProfile.run("main(ARGS.day, ARGS.year, ARGS.slow, ARGS.debug)", sort="tottime")
else:
    main(ARGS.day, ARGS.year, ARGS.slow, ARGS.debug)
